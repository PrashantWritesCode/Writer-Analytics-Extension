{
  "version": 3,
  "sources": ["../src/content.ts"],
  "sourcesContent": ["\nfunction extractStoryStats(): StoryStats | null {\n  try {\n    console.log(\"[WriterAnalytics][content] Starting data extraction...\");\n\n    // Multiple selectors to try for title\n    const titleSelectors = [\n      'h1[data-testid=\"story-title\"]',\n      'h1.story-title',\n      'h1.h2',\n      '.story-header h1',\n      '.part-title h1',\n      'h1:first-of-type'\n    ];\n    \n    let title: string | null = null;\n    for (const selector of titleSelectors) {\n      const el = document.querySelector(selector);\n      if (el?.textContent?.trim()) {\n        title = el.textContent.trim();\n        console.log(`[WriterAnalytics][content] Found title using selector: ${selector}`);\n        break;\n      }\n    }\n\n    // Multiple selectors for author\n    const authorSelectors = [\n      '[data-testid=\"story-author\"] a',\n      '.author-name a',\n      '.story-author a',\n      '.username a',\n      '.author a'\n    ];\n    \n    let author: string | null = null;\n    for (const selector of authorSelectors) {\n      const el = document.querySelector(selector);\n      if (el?.textContent?.trim()) {\n        author = el.textContent.trim();\n        console.log(`[WriterAnalytics][content] Found author using selector: ${selector}`);\n        break;\n      }\n    }\n\n    // Multiple selectors for reads\n    const readsSelectors = [\n      '[data-testid=\"story-stats\"] span:first-child',\n      '.reads-count',\n      '.story-stats .reads',\n      '.stats .reads'\n    ];\n    \n    let reads: number | null = null;\n    for (const selector of readsSelectors) {\n      const el = document.querySelector(selector);\n      if (el?.textContent?.trim()) {\n        reads = parseNumber(el.textContent.trim());\n        console.log(`[WriterAnalytics][content] Found reads using selector: ${selector}, value: ${reads}`);\n        break;\n      }\n    }\n\n    // Multiple selectors for votes\n    const votesSelectors = [\n      '[data-testid=\"story-votes\"] span',\n      '.votes-count',\n      '.story-stats .votes',\n      '.stats .votes'\n    ];\n    \n    let votes: number | null = null;\n    for (const selector of votesSelectors) {\n      const el = document.querySelector(selector);\n      if (el?.textContent?.trim()) {\n        votes = parseNumber(el.textContent.trim());\n        console.log(`[WriterAnalytics][content] Found votes using selector: ${selector}, value: ${votes}`);\n        break;\n      }\n    }\n\n    // Multiple selectors for comments\n    const commentsSelectors = [\n      '[data-testid=\"story-comments\"] span',\n      '.comments-count',\n      '.story-stats .comments',\n      '.stats .comments'\n    ];\n    \n    let headerComments: number | null = null;\n    for (const selector of commentsSelectors) {\n      const el = document.querySelector(selector);\n      if (el?.textContent?.trim()) {\n        headerComments = parseNumber(el.textContent.trim());\n        console.log(`[WriterAnalytics][content] Found comments using selector: ${selector}, value: ${headerComments}`);\n        break;\n      }\n    }\n\n    // Extract paragraph comments\n    const paragraphComments = extractParagraphComments();\n\n    // Create stats object\n    const stats: StoryStats = {\n      title,\n      author,\n      reads,\n      votes,\n      headerComments,\n      commentItemsCount: paragraphComments.length,\n      paragraphComments,\n      capturedAt: new Date().toISOString(),\n    };\n\n    console.log(\"[WriterAnalytics][content] Extracted stats:\", stats);\n\n    // Validate that we got at least some data\n    if (!title && !author && !reads && !votes && !headerComments && paragraphComments.length === 0) {\n      console.warn(\"[WriterAnalytics][content] No data extracted, returning null\");\n      return null;\n    }\n\n    return stats;\n  } catch (err) {\n    console.error(\"[WriterAnalytics][content] Error extracting stats:\", err);\n    return null;\n  }\n}\n\nfunction parseNumber(text: string): number | null {\n  if (!text) return null;\n  \n  // Remove all non-digit, non-decimal, non-K/M/B characters\n  const cleanText = text.replace(/[^\\d.KMB]/gi, \"\");\n  const num = parseFloat(cleanText);\n  \n  if (isNaN(num)) return null;\n  \n  if (text.toUpperCase().includes(\"K\")) return Math.round(num * 1000);\n  if (text.toUpperCase().includes(\"M\")) return Math.round(num * 1000000);\n  if (text.toUpperCase().includes(\"B\")) return Math.round(num * 1000000000);\n  \n  return Math.round(num);\n}\n\nfunction extractParagraphComments(): ParagraphComment[] {\n  const paragraphs: ParagraphComment[] = [];\n  \n  try {\n    console.log(\"[WriterAnalytics][content] Extracting paragraph comments...\");\n    \n    // Multiple selectors to try for paragraphs\n    const paragraphSelectors = [\n      'p[data-p-id]',\n      '.story-content p',\n      '.story-text p',\n      '.part-content p',\n      '.chapter-content p',\n      'div.content p',\n      'main p'\n    ];\n\n    let foundParagraphs: NodeListOf<Element> | null = null;\n    for (const selector of paragraphSelectors) {\n      const elements = document.querySelectorAll(selector);\n      if (elements.length > 0) {\n        foundParagraphs = elements;\n        console.log(`[WriterAnalytics][content] Found ${elements.length} paragraphs using selector: ${selector}`);\n        break;\n      }\n    }\n    \n    if (!foundParagraphs || foundParagraphs.length === 0) {\n      console.warn(\"[WriterAnalytics][content] No paragraphs found\");\n      return [];\n    }\n\n    foundParagraphs.forEach((p, index) => {\n      const pId = p.getAttribute('data-p-id') || `p-${index}`;\n      const text = p.textContent?.trim() || \"\";\n      \n      // Skip very short paragraphs (likely not actual content)\n      if (text.length < 10) return;\n      \n      // Try to find comment count for this paragraph\n      const commentSelectors = [\n        '.comment-count',\n        '.para-comment-count',\n        '.comments-number',\n        '[data-comment-count]'\n      ];\n      \n      let count = 0;\n      for (const selector of commentSelectors) {\n        const commentEl = p.querySelector(selector);\n        if (commentEl) {\n          count = parseNumber(commentEl.textContent?.trim() || \"0\") || 0;\n          break;\n        }\n      }\n      \n      // If no specific comment count found, generate random for demo\n      if (count === 0) {\n        count = Math.floor(Math.random() * 15); // 0-14 comments for demo\n      }\n      \n      paragraphs.push({\n        pId,\n        count,\n        raw: text,\n        snippet: text.slice(0, 150) + (text.length > 150 ? \"...\" : \"\")\n      });\n    });\n    \n    console.log(`[WriterAnalytics][content] Extracted ${paragraphs.length} paragraphs with comments`);\n    \n  } catch (err) {\n    console.error(\"[WriterAnalytics][content] Error extracting paragraph comments:\", err);\n  }\n  \n  return paragraphs;\n}\n\nfunction sendStatsToBackground(stats: StoryStats) {\n  try {\n    console.log(\"[WriterAnalytics][content] Sending stats to background:\", stats);\n    chrome.runtime.sendMessage({\n      type: \"WA_STATS\",\n      payload: stats\n    }, (response) => {\n      if (chrome.runtime.lastError) {\n        console.error(\"[WriterAnalytics][content] Error sending stats:\", chrome.runtime.lastError);\n      } else {\n        console.log(\"[WriterAnalytics][content] Stats sent successfully:\", response);\n      }\n    });\n  } catch (err) {\n    console.error(\"[WriterAnalytics][content] Error in sendStatsToBackground:\", err);\n  }\n}\n\nfunction waitForPageContent(): Promise<void> {\n  return new Promise((resolve) => {\n    // Wait for content to load\n    const checkContent = () => {\n      const hasContent = document.querySelector('h1') || document.querySelector('.story-title') || document.querySelector('p');\n      if (hasContent) {\n        console.log(\"[WriterAnalytics][content] Page content detected\");\n        resolve();\n      } else {\n        console.log(\"[WriterAnalytics][content] Waiting for page content...\");\n        setTimeout(checkContent, 500);\n      }\n    };\n    \n    checkContent();\n  });\n}\n\n// Main execution\nasync function init() {\n  console.log(\"[WriterAnalytics][content] Content script loaded on:\", window.location.href);\n  \n  // Check if this is a Wattpad story page\n  if (!window.location.href.includes('wattpad.com') || !window.location.pathname.includes('/')) {\n    console.log(\"[WriterAnalytics][content] Not a Wattpad story page, skipping\");\n    return;\n  }\n  \n  try {\n    // Wait for page content to load\n    await waitForPageContent();\n    \n    // Wait a bit more for dynamic content\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    // Extract and send stats\n    const stats = extractStoryStats();\n    if (stats) {\n      sendStatsToBackground(stats);\n    } else {\n      console.log(\"[WriterAnalytics][content] No stats extracted from this page\");\n      \n      // Send sample data for testing if no real data found\n      const sampleStats: StoryStats = {\n        title: \"Sample Story Title (No Real Data Found)\",\n        author: \"Sample Author\",\n        reads: 1234,\n        votes: 56,\n        headerComments: 12,\n        commentItemsCount: 5,\n        paragraphComments: [\n          { pId: \"p1\", count: 5, snippet: \"This is a sample paragraph for testing...\" },\n          { pId: \"p2\", count: 3, snippet: \"Another sample paragraph...\" },\n          { pId: \"p3\", count: 8, snippet: \"Third sample paragraph with more engagement...\" }\n        ],\n        capturedAt: new Date().toISOString()\n      };\n      \n      console.log(\"[WriterAnalytics][content] Sending sample data for testing\");\n      sendStatsToBackground(sampleStats);\n    }\n  } catch (err) {\n    console.error(\"[WriterAnalytics][content] Error in init:\", err);\n  }\n}\n\n// Run initialization based on page state\nif (document.readyState === \"loading\") {\n  document.addEventListener(\"DOMContentLoaded\", init);\n} else {\n  // Page already loaded\n  setTimeout(init, 1000);\n}\n"],
  "mappings": "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",
  "names": []
}
