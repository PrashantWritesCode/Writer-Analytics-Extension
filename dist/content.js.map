{
  "version": 3,
  "sources": ["../src/content.ts"],
  "sourcesContent": ["// content.ts (extracted & slightly modified to include storyId in payload)\n\ntype ParagraphComment = {\n  pId: string;\n  count: number | null;\n  raw?: string;\n  snippet?: string;\n};\n\ntype StoryStats = {\n  storyId?: string;\n  title?: string | null;\n  author?: string | null;\n  reads?: number | null;\n  votes?: number | null;\n  headerComments?: number | null;\n  commentItemsCount?: number;\n  paragraphComments?: ParagraphComment[];\n  capturedAt?: string;\n  wordCount?: number;\n};\n\nfunction parseNumber(text: string): number | null {\n  if (!text) return null;\n  const cleanText = text.replace(/[^\\d.KMB]/gi, \"\");\n  const num = parseFloat(cleanText);\n  if (isNaN(num)) return null;\n  if (text.toUpperCase().includes(\"K\")) return Math.round(num * 1000);\n  if (text.toUpperCase().includes(\"M\")) return Math.round(num * 1000000);\n  if (text.toUpperCase().includes(\"B\")) return Math.round(num * 1000000000);\n  return Math.round(num);\n}\n\nfunction extractParagraphComments(): ParagraphComment[] {\n  const paragraphs: ParagraphComment[] = [];\n  try {\n    const pages = document.querySelectorAll('.page.highlighter');\n    if (!pages || pages.length === 0) {\n      // Fallback: try any p[data-p-id] on page\n      const fallback = document.querySelectorAll('p[data-p-id]');\n      fallback.forEach((p) => {\n        const pId = p.getAttribute('data-p-id') || `p-${paragraphs.length}`;\n        const text = p.textContent?.trim() || \"\";\n        if (text.length < 10) return;\n        const commentElement = p.querySelector('.num-comment');\n        let count = 0;\n        if (commentElement) {\n          const countText = commentElement.textContent?.trim() || \"0\";\n          count = parseNumber(countText) || 0;\n        }\n        paragraphs.push({\n          pId,\n          count,\n          raw: text,\n          snippet: text.slice(0, 150) + (text.length > 150 ? \"...\" : \"\")\n        });\n      });\n      return paragraphs;\n    }\n\n    pages.forEach((page) => {\n      const paragraphElements = page.querySelectorAll('p[data-p-id]');\n      paragraphElements.forEach((p) => {\n        const pId = p.getAttribute('data-p-id') || `p-${paragraphs.length}`;\n        const text = p.textContent?.trim() || \"\";\n        if (text.length < 10) return;\n        const commentElement = p.querySelector('.num-comment');\n        let count = 0;\n        if (commentElement) {\n          const countText = commentElement.textContent?.trim() || \"0\";\n          count = parseNumber(countText) || 0;\n        }\n        paragraphs.push({\n          pId,\n          count,\n          raw: text,\n          snippet: text.slice(0, 150) + (text.length > 150 ? \"...\" : \"\")\n        });\n      });\n    });\n  } catch (err) {\n    console.error(\"[content] paragraph extraction error:\", err);\n  }\n  return paragraphs;\n}\n\nfunction extractStoryStats(): StoryStats | null {\n  try {\n    const titleSelectors = [\n      'h1[data-testid=\"story-title\"]',\n      'h1.story-title',\n      'h1.h2',\n      '.story-header h1',\n      '.part-title h1',\n      'h1:first-of-type'\n    ];\n    let title: string | null = null;\n    for (const sel of titleSelectors) {\n      const el = document.querySelector(sel);\n      if (el?.textContent?.trim()) { title = el.textContent!.trim(); break; }\n    }\n\n    const authorSelectors = [\n      '[data-testid=\"story-author\"] a',\n      '.author-name a',\n      '.story-author a',\n      '.username a',\n      '.author a'\n    ];\n    let author: string | null = null;\n    for (const sel of authorSelectors) {\n      const el = document.querySelector(sel);\n      if (el?.textContent?.trim()) { author = el.textContent!.trim(); break; }\n    }\n\n    const readsSelectors = [\n      '[data-testid=\"story-stats\"] span:first-child',\n      '.reads-count',\n      '.story-stats .reads',\n      '.stats .reads'\n    ];\n    let reads: number | null = null;\n    for (const sel of readsSelectors) {\n      const el = document.querySelector(sel);\n      if (el?.textContent?.trim()) { reads = parseNumber(el.textContent!.trim()); break; }\n    }\n\n    const votesSelectors = [\n      '[data-testid=\"story-votes\"] span',\n      '.votes-count',\n      '.story-stats .votes',\n      '.stats .votes'\n    ];\n    let votes: number | null = null;\n    for (const sel of votesSelectors) {\n      const el = document.querySelector(sel);\n      if (el?.textContent?.trim()) { votes = parseNumber(el.textContent!.trim()); break; }\n    }\n\n    const commentsSelectors = [\n      '[data-testid=\"story-comments\"] span',\n      '.comments-count',\n      '.story-stats .comments',\n      '.stats .comments'\n    ];\n    let headerComments: number | null = null;\n    for (const sel of commentsSelectors) {\n      const el = document.querySelector(sel);\n      if (el?.textContent?.trim()) { headerComments = parseNumber(el.textContent!.trim()); break; }\n    }\n\n    const paragraphComments = extractParagraphComments();\n    const storyId = (window.location.pathname.split('/').pop() || 'unknown-story').replace(/\\?.*$/, '');\n\n    const stats: StoryStats = {\n      storyId,\n      title,\n      author,\n      reads,\n      votes,\n      headerComments,\n      commentItemsCount: paragraphComments.length,\n      paragraphComments,\n      capturedAt: new Date().toISOString()\n    };\n\n    // minimal sanity check\n    if (!title && !author && !reads && !votes && !headerComments && paragraphComments.length === 0) {\n      return null;\n    }\n\n    // Save to storage per-story\n    const key = `writerAnalyticsStats-${storyId}`;\n    try {\n      chrome.storage.local.set({ [key]: stats }, () => {\n        console.log(`[content] saved stats to ${key}`);\n      });\n    } catch (err) {\n      console.warn(\"[content] storage set error:\", err);\n    }\n\n    // send to background with storyId included\n    try {\n      chrome.runtime.sendMessage({ type: \"WA_STATS\", payload: stats }, (resp) => {\n        if (chrome.runtime.lastError) {\n          console.warn(\"[content] sendMessage WA_STATS error:\", chrome.runtime.lastError.message);\n        }\n      });\n    } catch (err) {\n      console.warn(\"[content] send WA_STATS failed:\", err);\n    }\n\n    return stats;\n  } catch (err) {\n    console.error(\"[content] extractStoryStats error:\", err);\n    return null;\n  }\n}\n\nfunction waitForPageContent(): Promise<void> {\n  return new Promise((resolve) => {\n    const check = () => {\n      const has = document.querySelector('h1') || document.querySelector('.story-title') || document.querySelector('p');\n      if (has) return resolve();\n      setTimeout(check, 500);\n    };\n    check();\n  });\n}\n\nasync function init() {\n  if (!window.location.href.includes('wattpad.com')) return;\n  try {\n    await waitForPageContent();\n    await new Promise(r => setTimeout(r, 1000));\n    const stats = extractStoryStats();\n    if (!stats) {\n      // send sample fallback so popup can still show demo\n      const sample: StoryStats = {\n        storyId: 'sample',\n        title: 'Sample Story Title (no data found)',\n        author: 'Sample Author',\n        reads: 1234,\n        votes: 56,\n        headerComments: 12,\n        commentItemsCount: 3,\n        paragraphComments: [\n          { pId: 'p1', count: 5, snippet: 'This is sample paragraph one...' },\n          { pId: 'p2', count: 3, snippet: 'Sample paragraph two...' },\n          { pId: 'p3', count: 8, snippet: 'Sample paragraph three...' }\n        ],\n        capturedAt: new Date().toISOString()\n      };\n      chrome.runtime.sendMessage({ type: \"WA_STATS\", payload: sample }, () => {});\n    }\n  } catch (err) {\n    console.error(\"[content] init error:\", err);\n  }\n}\n\n// handle messages from background/popup\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n  if (!message || !message.type) return;\n  if (message.type === \"WA_REFRESH\") {\n    const stats = extractStoryStats();\n    sendResponse({ payload: stats || null });\n    return true;\n  }\n  if (message.type === \"WA_URL_CHANGE\") {\n    const stats = extractStoryStats();\n    sendResponse({ success: !!stats, payload: stats || null });\n    return true;\n  }\n});\n\nif (document.readyState === \"loading\") {\n  document.addEventListener(\"DOMContentLoaded\", init);\n} else {\n  setTimeout(init, 800);\n}\n\n// detect SPA URL changes\nlet lastUrl = location.href;\nsetInterval(() => {\n  if (location.href !== lastUrl) {\n    lastUrl = location.href;\n    init();\n  }\n}, 1000);\n"],
  "mappings": "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",
  "names": []
}
