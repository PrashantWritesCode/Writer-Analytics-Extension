{
  "version": 3,
  "sources": ["../src/background.ts"],
  "sourcesContent": ["\n\nconsole.log(\"[background] service worker starting\");\n\n// Helpers: load all saved writerAnalyticsStats-* keys\nasync function loadAllSavedStats(): Promise<{ key: string; stats: StoryStats }[]> {\n  return new Promise((resolve) => {\n    chrome.storage.local.get(null, (all) => {\n      const keys = Object.keys(all).filter(k => k.startsWith(\"writerAnalyticsStats-\"));\n      const arr = keys.map(k => ({ key: k, stats: all[k] as StoryStats }));\n      resolve(arr);\n    });\n  });\n}\n\nasync function loadLatestSavedStats(): Promise<StoryStats | null> {\n  const arr = await loadAllSavedStats();\n  if (arr.length === 0) return null;\n  // pick by capturedAt if present\n  arr.sort((a, b) => {\n    const ta = a.stats?.capturedAt ? new Date(a.stats.capturedAt).getTime() : 0;\n    const tb = b.stats?.capturedAt ? new Date(b.stats.capturedAt).getTime() : 0;\n    return tb - ta;\n  });\n  return arr[0].stats || null;\n}\n\nasync function saveStatsForStory(stats: StoryStats) {\n  const sid = stats.storyId || `unknown-${Date.now()}`;\n  const key = `writerAnalyticsStats-${sid}`;\n  return new Promise<void>((resolve) => {\n    chrome.storage.local.set({ [key]: stats }, () => {\n      console.log(\"[background] saved stats under\", key);\n      resolve();\n    });\n  });\n}\n\n// try injecting content script into a given tab\nasync function injectContentScript(tabId: number, url: string) {\n  try {\n    await chrome.scripting.executeScript({\n      target: { tabId },\n      files: [\"content.js\"],\n    });\n    console.log(`[background] injected content.js into ${url}`);\n  } catch (err) {\n    console.warn(`[background] inject failed for ${url}:`, err);\n  }\n}\n\n// onInstalled: try injecting into open Wattpad story tabs\nchrome.runtime.onInstalled.addListener(async (details) => {\n  try {\n    const tabs = await chrome.tabs.query({ url: \"*://www.wattpad.com/*\" });\n    for (const t of tabs) {\n      if (t.id && t.url && t.url.includes(\"/\")) {\n        await injectContentScript(t.id, t.url);\n      }\n    }\n  } catch (err) {\n    console.error(\"[background] onInstalled error:\", err);\n  }\n});\n\n// Listen for messages from content/popup\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n  (async () => {\n    try {\n      if (!message || !message.type) {\n        sendResponse({ success: false, error: \"invalid message\" });\n        return;\n      }\n\n      if (message.type === \"WA_STATS\") {\n        const stats = message.payload as StoryStats;\n        if (stats && stats.storyId) {\n          await saveStatsForStory(stats);\n        } else if (stats) {\n          // try to save with fallback key\n          await saveStatsForStory(stats);\n        }\n        // broadcast update to any popup listeners\n        chrome.runtime.sendMessage({ type: \"WA_UPDATE\", payload: stats }, () => {\n          if (chrome.runtime.lastError) {\n            // likely popup not open \u2014 that's okay\n          }\n        });\n        sendResponse({ success: true });\n        return;\n      }\n\n      if (message.type === \"GET_WA_STATS\") {\n        const stats = await loadLatestSavedStats();\n        sendResponse({ success: true, stats });\n        return;\n      }\n\n      if (message.type === \"WA_REFRESH\") {\n        // send refresh request to active tab's content script and wait for response\n        chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n          if (!tabs || tabs.length === 0 || !tabs[0].id) {\n            // fallback to cached\n            loadLatestSavedStats().then((stats) => sendResponse({ success: true, payload: stats }));\n            return;\n          }\n          const tabId = tabs[0].id!;\n          chrome.tabs.sendMessage(tabId, { type: \"WA_REFRESH\" }, async (response) => {\n            if (chrome.runtime.lastError) {\n              // content script not present or error \u2014 attempt injection then fallback\n              console.warn(\"[background] sendMessage to tab failed:\", chrome.runtime.lastError.message);\n              try {\n                await injectContentScript(tabId, tabs[0].url || \"\");\n                // ask again after injection\n                chrome.tabs.sendMessage(tabId, { type: \"WA_REFRESH\" }, (resp2) => {\n                  if (resp2 && resp2.payload) {\n                    saveStatsForStory(resp2.payload as StoryStats).then(() => {\n                      sendResponse({ success: true, payload: resp2.payload });\n                    });\n                  } else {\n                    loadLatestSavedStats().then((stats) => sendResponse({ success: true, payload: stats }));\n                  }\n                });\n              } catch (err) {\n                loadLatestSavedStats().then((stats) => sendResponse({ success: true, payload: stats }));\n              }\n              return;\n            }\n            if (response && response.payload) {\n              await saveStatsForStory(response.payload as StoryStats);\n              sendResponse({ success: true, payload: response.payload });\n            } else {\n              const stats = await loadLatestSavedStats();\n              sendResponse({ success: true, payload: stats });\n            }\n          });\n        });\n        return;\n      }\n\n      if (message.type === \"WA_URL_CHANGE\") {\n        // try to execute extractStoryStats in active tab and save\n        chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n          if (!tabs || !tabs[0] || !tabs[0].id) {\n            sendResponse({ success: false });\n            return;\n          }\n          const tabId = tabs[0].id!;\n          chrome.scripting.executeScript({\n            target: { tabId },\n            func: () => {\n              // run in page context\n              try {\n                // @ts-ignore\n                const fn = (window as any).extractStoryStats;\n                return fn ? fn() : null;\n              } catch (e) {\n                return null;\n              }\n            }\n          }, async (injectionResults) => {\n            if (injectionResults && injectionResults[0] && injectionResults[0].result) {\n              const stats = injectionResults[0].result as StoryStats;\n              if (stats) {\n                await saveStatsForStory(stats);\n                chrome.runtime.sendMessage({ type: \"WA_UPDATE\", payload: stats }, () => {});\n                sendResponse({ success: true });\n                return;\n              }\n            }\n            sendResponse({ success: false });\n          });\n        });\n        return;\n      }\n\n      // default\n      sendResponse({ success: false, error: \"unknown type\" });\n    } catch (err) {\n      console.error(\"[background] message handler error:\", err);\n      try { sendResponse({ success: false, error: (err as any).message || \"error\" }); } catch {}\n    }\n  })();\n\n  return true; // indicate async sendResponse\n});\n"],
  "mappings": "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",
  "names": []
}
