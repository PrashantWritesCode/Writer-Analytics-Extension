{
  "version": 3,
  "sources": ["../src/background.ts"],
  "sourcesContent": ["type ParagraphComment = {\n  pId: string;\n  count: number | null;\n  raw?: string;\n  snippet?: string;\n};\n\ntype StoryStats = {\n  title?: string | null;\n  author?: string | null;\n  reads?: number | null;\n  votes?: number | null;\n  headerComments?: number | null;\n  commentItemsCount?: number;\n  paragraphComments?: ParagraphComment[];\n  capturedAt?: string;\n  wordCount?: number;\n};\n\nconst CACHE_KEY = \"writerAnalyticsStats\";\n\n// Load cached stats\nasync function loadCachedStats(): Promise<StoryStats | null> {\n  try {\n    const result = await chrome.storage.local.get([CACHE_KEY]);\n    const cached = result[CACHE_KEY];\n    console.log(\"[WriterAnalytics][background] loaded cached stats\", !!cached);\n    return cached || null;\n  } catch (err) {\n    console.error(\"[WriterAnalytics][background] Error loading cache:\", err);\n    return null;\n  }\n}\n\n// Save stats to cache\nasync function saveCachedStats(stats: StoryStats): Promise<void> {\n  try {\n    await chrome.storage.local.set({ [CACHE_KEY]: stats });\n    console.log(\"[WriterAnalytics][background] saved stats for\", stats.title);\n  } catch (err) {\n    console.error(\"[WriterAnalytics][background] Error saving cache:\", err);\n  }\n}\n\n// Inject content script into Wattpad tabs\nasync function injectContentScript(tabId: number, url: string) {\n  try {\n    await chrome.scripting.executeScript({\n      target: { tabId },\n      files: [\"content.js\"],\n    });\n    console.log(`[WriterAnalytics][background] reinjected content.js into ${url}`);\n  } catch (err) {\n    console.warn(`[WriterAnalytics][background] failed to inject into ${url}:`, err);\n  }\n}\n\n// Check if URL is a Wattpad story\nfunction isWattpadStory(url: string): boolean {\n  return url.includes(\"wattpad.com\") && /\\/\\d+-/.test(url);\n}\n\n// Service worker startup\nconsole.log(\"[WriterAnalytics][background] service worker starting\");\n\n// Extension installed/updated\nchrome.runtime.onInstalled.addListener(async (details) => {\n  console.log(\"[WriterAnalytics][background] onInstalled\", details.reason);\n  \n  // Inject content script into existing Wattpad tabs\n  try {\n    const tabs = await chrome.tabs.query({ url: \"*://www.wattpad.com/*\" });\n    for (const tab of tabs) {\n      if (tab.id && tab.url && isWattpadStory(tab.url)) {\n        await injectContentScript(tab.id, tab.url);\n      }\n    }\n  } catch (err) {\n    console.error(\"[WriterAnalytics][background] Error injecting into existing tabs:\", err);\n  }\n});\n\n// Tab navigation\nchrome.tabs.onUpdated.addListener(async (tabId, changeInfo, tab) => {\n  if (changeInfo.status === \"complete\" && tab.url && isWattpadStory(tab.url)) {\n    await injectContentScript(tabId, tab.url);\n  }\n});\n\n// Message handling with proper async support\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n  console.log(\"[WriterAnalytics][background] Received message:\", message.type);\n  \n  if (message.type === \"WA_STATS\") {\n    // Handle incoming stats from content script\n    (async () => {\n      try {\n        const stats = message.payload as StoryStats;\n        console.log(\"[WriterAnalytics][background] caching WA_STATS\", stats.title);\n        \n        await saveCachedStats(stats);\n        \n        // Try to forward to popup if it's open (ignore if fails)\n        try {\n          await chrome.runtime.sendMessage({\n            type: \"WA_STATS\",\n            payload: stats\n          });\n        } catch (err) {\n          // Popup might not be open, that's ok\n          console.log(\"[WriterAnalytics][background] Popup not open, stats cached\");\n        }\n        \n        sendResponse({ success: true });\n      } catch (err:any) {\n        console.error(\"[WriterAnalytics][background] Error handling WA_STATS:\", err);\n        sendResponse({ success: false, error: err.message });\n      }\n    })();\n    \n    return true; // Keep message channel open for async response\n  }\n  \n  if (message.type === \"GET_WA_STATS\") {\n    // Handle popup request for cached stats\n    console.log(\"[WriterAnalytics][background] GET_WA_STATS request received\");\n    \n    (async () => {\n      try {\n        const stats = await loadCachedStats();\n        console.log(\"[WriterAnalytics][background] Sending cached stats:\", !!stats);\n        sendResponse({ \n          success: true, \n          stats: stats \n        });\n      } catch (err:any) {\n        console.error(\"[WriterAnalytics][background] Error loading cached stats:\", err);\n        sendResponse({ \n          success: false, \n          error: err.message \n        });\n      }\n    })();\n    \n    return true; // Keep message channel open for async response\n  }\n  \n  return false;\n});\n\nconsole.log(\"[WriterAnalytics][background] background script loaded\");\n"],
  "mappings": "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",
  "names": []
}
