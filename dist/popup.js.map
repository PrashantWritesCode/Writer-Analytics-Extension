{
  "version": 3,
  "sources": ["../src/popup.ts"],
  "sourcesContent": ["// import Chart from \"chart.js/auto\";\n\n// type ParagraphComment = {\n//   pId: string;\n//   count: number | null;\n//   raw?: string;\n//   snippet?: string;\n// };\n\n// type StoryStats = {\n//   title?: string | null;\n//   author?: string | null;\n//   reads?: number | null;\n//   votes?: number | null;\n//   headerComments?: number | null;\n//   commentItemsCount?: number;\n//   paragraphComments?: ParagraphComment[];\n//   capturedAt?: string;\n//   wordCount?: number;\n// };\n\n// function $<T extends HTMLElement = HTMLElement>(id: string): T | null {\n//   return document.getElementById(id) as T | null;\n// }\n\n// function showStatus(text: string) {\n//   const status = $(\"status\");\n//   const content = $(\"content\");\n//   if (status) {\n//     status.style.display = \"block\";\n//     status.textContent = text;\n//   }\n//   if (content) content.style.display = \"none\";\n// }\n\n// function showContent() {\n//   const status = $(\"status\");\n//   const content = $(\"content\");\n//   if (status) status.style.display = \"none\";\n//   if (content) content.style.display = \"block\";\n// }\n\n// function formatNumber(num: number | null | undefined): string {\n//   if (num === null || num === undefined) return \"\u2014\";\n//   if (num >= 1000000) return (num / 1000000).toFixed(1) + \"M\";\n//   if (num >= 1000) return (num / 1000).toFixed(1) + \"K\";\n//   return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n// }\n\n// function firstN(text: string | undefined | null, n = 120) {\n//   if (!text) return \"\";\n//   const s = text.trim().replace(/\\s+/g, \" \");\n//   return s.length <= n ? s : s.slice(0, n).trim() + \"\u2026\";\n// }\n\n// let chart: Chart | null = null;\n\n// // Theme handling\n// function initTheme() {\n//   const themeToggle = $(\"theme-toggle\");\n//   const themeIcon = themeToggle?.querySelector(\".theme-icon\");\n  \n//   // Load saved theme\n//   chrome.storage.local.get([\"theme\"], (result) => {\n//     const isDark = result.theme === \"dark\";\n//     document.body.classList.toggle(\"dark-theme\", isDark);\n//     if (themeIcon) themeIcon.textContent = isDark ? \"\u2600\uFE0F\" : \"\uD83C\uDF19\";\n//   });\n\n//   // Theme toggle handler\n//   themeToggle?.addEventListener(\"click\", () => {\n//     const isDark = document.body.classList.toggle(\"dark-theme\");\n//     if (themeIcon) themeIcon.textContent = isDark ? \"\u2600\uFE0F\" : \"\uD83C\uDF19\";\n//     chrome.storage.local.set({ theme: isDark ? \"dark\" : \"light\" });\n    \n//     // Update chart colors if exists\n//     if (chart) {\n//       updateChartTheme();\n//     }\n//   });\n// }\n\n// function updateChartTheme() {\n//   if (!chart) return;\n  \n//   const isDark = document.body.classList.contains(\"dark-theme\");\n//   const textColor = isDark ? \"#e2e8f0\" : \"#4a5568\";\n//   const gridColor = isDark ? \"#4a5568\" : \"#e2e8f0\";\n  \n//   if (chart.options.scales?.x?.ticks) chart.options.scales.x.ticks.color = textColor;\n//   if (chart.options.scales?.y?.ticks) chart.options.scales.y.ticks.color = textColor;\n//   if (chart.options.scales?.x?.grid) chart.options.scales.x.grid.color = gridColor;\n//   if (chart.options.scales?.y?.grid) chart.options.scales.y.grid.color = gridColor;\n  \n//   chart.update();\n// }\n\n// function renderChart(paragraphs: ParagraphComment[]) {\n//   const canvas = $(\"commentsChart\");\n//   if (!(canvas instanceof HTMLCanvasElement)) {\n//     console.warn(\"Chart creation failed: canvas element not found or invalid.\");\n//     return;\n//   }\n\n//   const ctx = canvas.getContext(\"2d\");\n//   if (!ctx) {\n//     console.warn(\"Chart creation failed: unable to get 2d context.\");\n//     return;\n//   }\n\n//   if (paragraphs.length === 0) {\n//     if (chart) {\n//       chart.destroy();\n//       chart = null;\n//     }\n//     ctx.fillStyle = \"#888\";\n//     ctx.textAlign = \"center\";\n//     ctx.fillText(\"No paragraph data available\", canvas.width / 2, canvas.height / 2);\n//     return;\n//   }\n\n//   if (chart) chart.destroy();\n\n//   const isDark = document.body.classList.contains(\"dark-theme\");\n//   const textColor = isDark ? \"#e2e8f0\" : \"#4a5568\";\n//   const gridColor = isDark ? \"#4a5568\" : \"#e2e8f0\";\n\n//   chart = new Chart(ctx, {\n//     type: \"bar\",\n//     data: {\n//       labels: paragraphs.map((_, i) => `P${i + 1}`),\n//       datasets: [\n//         {\n//           label: \"Comments\",\n//           data: paragraphs.map((p) => p.count ?? 0),\n//           backgroundColor: \"rgba(38, 166, 154, 0.6)\",\n//           borderColor: \"rgba(38, 166, 154, 1)\",\n//           borderWidth: 2,\n//           borderRadius: 4,\n//         },\n//       ],\n//     },\n//     options: {\n//       responsive: true,\n//       maintainAspectRatio: false,\n//       plugins: {\n//         legend: { \n//           display: false \n//         },\n//         tooltip: {\n//           backgroundColor: isDark ? \"#2d3748\" : \"#ffffff\",\n//           titleColor: textColor,\n//           bodyColor: textColor,\n//           borderColor: isDark ? \"#4a5568\" : \"#e2e8f0\",\n//           borderWidth: 1,\n//         },\n//       },\n//       scales: {\n//         x: { \n//           ticks: { \n//             maxRotation: 45, \n//             minRotation: 0,\n//             color: textColor,\n//           },\n//           grid: {\n//             color: gridColor,\n//           }\n//         },\n//         y: { \n//           beginAtZero: true,\n//           ticks: {\n//             color: textColor,\n//           },\n//           grid: {\n//             color: gridColor,\n//           }\n//         },\n//       },\n//     },\n//   });\n// }\n\n// function renderTopParagraphs(paragraphs: ParagraphComment[]) {\n//   const topList = $(\"topList\");\n//   if (!topList) return;\n\n//   topList.innerHTML = \"\";\n//   const top = [...paragraphs]\n//     .sort((a, b) => (b.count ?? 0) - (a.count ?? 0))\n//     .slice(0, 3);\n\n//   if (top.length === 0) {\n//     const li = document.createElement(\"li\");\n//     li.textContent = \"No paragraph comments found\";\n//     li.style.listStyle = \"none\";\n//     topList.appendChild(li);\n//     return;\n//   }\n\n//   top.forEach((p) => {\n//     const li = document.createElement(\"li\");\n//     const count = p.count ?? 0;\n//     const snippet = firstN(p.snippet || p.raw);\n//     li.innerHTML = `<strong>${count} comment${count === 1 ? \"\" : \"s\"}:</strong> \"${snippet}\"`;\n//     topList.appendChild(li);\n//   });\n// }\n\n// function renderAllParagraphs(paragraphs: ParagraphComment[]) {\n//   const pWrap = $(\"paragraphs\");\n//   if (!pWrap) return;\n\n//   pWrap.innerHTML = \"\";\n  \n//   if (paragraphs.length === 0) {\n//     const div = document.createElement(\"div\");\n//     div.className = \"para\";\n//     div.textContent = \"No paragraphs found\";\n//     pWrap.appendChild(div);\n//     return;\n//   }\n\n//   paragraphs.forEach((p: ParagraphComment, i: number) => {\n//     const div = document.createElement(\"div\");\n//     div.className = \"para\";\n//     const snippet = firstN(p.snippet ?? p.raw ?? \"\", 100);\n//     const count = p.count ?? 0;\n//     div.innerHTML = `<strong>Paragraph ${i + 1}:</strong> \"${snippet || \"...\"}\" \u2014 <span style=\"color: var(--accent-primary); font-weight: 600;\">${count} comment${count === 1 ? \"\" : \"s\"}</span>`;\n//     pWrap.appendChild(div);\n//   });\n// }\n\n// function renderStats(stats: StoryStats | null | undefined) {\n//   console.log(\"[WriterAnalytics][popup] renderStats called with:\", stats);\n  \n//   if (!stats) {\n//     showStatus(\"No stats found for this story yet. Please visit a Wattpad story page.\");\n//     return;\n//   }\n\n//   showContent();\n\n//   // Title & author\n//   const titleEl = $(\"title\");\n//   const authorEl = $(\"author\");\n//   if (titleEl) titleEl.textContent = stats.title ?? \"Untitled Story\";\n//   if (authorEl) authorEl.textContent = stats.author ? `by ${stats.author}` : \"by Unknown Author\";\n\n//   // Stats cards\n//   const readsEl = $(\"reads\");\n//   const votesEl = $(\"votes\");\n//   const headerCommentsEl = $(\"headerComments\");\n//   const commentItemsCountEl = $(\"commentItemsCount\");\n  \n//   if (readsEl) readsEl.textContent = formatNumber(stats.reads);\n//   if (votesEl) votesEl.textContent = formatNumber(stats.votes);\n//   if (headerCommentsEl) headerCommentsEl.textContent = formatNumber(stats.headerComments);\n//   if (commentItemsCountEl) commentItemsCountEl.textContent = formatNumber(stats.commentItemsCount);\n\n//   // Analytics calculations\n//   const engagementRate = stats.reads && stats.votes && stats.reads > 0\n//     ? ((stats.votes / stats.reads) * 100).toFixed(2) + \"%\"\n//     : \"\u2014\";\n//   const commentRatio = stats.reads && stats.headerComments && stats.reads > 0\n//     ? ((stats.headerComments / stats.reads) * 100).toFixed(2) + \"%\"\n//     : \"\u2014\";\n\n//   const engagementEl = $(\"engagementRate\");\n//   const commentRatioEl = $(\"commentRatio\");\n//   if (engagementEl) engagementEl.textContent = engagementRate;\n//   if (commentRatioEl) commentRatioEl.textContent = commentRatio;\n\n//   // Paragraphs\n//   const paragraphs = stats.paragraphComments ?? [];\n//   renderChart(paragraphs);\n//   renderTopParagraphs(paragraphs);\n//   renderAllParagraphs(paragraphs);\n// }\n\n// // DIRECT STORAGE READ - This will definitely work\n// function loadAndDisplayData() {\n//   console.log(\"[WriterAnalytics][popup] Loading data from storage...\");\n  \n//   chrome.storage.local.get([\"writerAnalyticsStats\"], (result) => {\n//     console.log(\"[WriterAnalytics][popup] Storage result:\", result);\n    \n//     const stats = result.writerAnalyticsStats;\n    \n//     if (!stats) {\n//       showStatus(\"No data found. Please visit a Wattpad story page first.\");\n//       return;\n//     }\n\n//     console.log(\"[WriterAnalytics][popup] Found stored stats, displaying...\");\n//     renderStats(stats);\n//   });\n// }\n\n// // Initialize\n// document.addEventListener(\"DOMContentLoaded\", () => {\n//   console.log(\"[WriterAnalytics][popup] DOM loaded, initializing...\");\n//   initTheme();\n//   loadAndDisplayData();\n// });\n\n\n\n\n// BULLETPROOF POPUP - GUARANTEED TO WORK\nfunction $<T extends HTMLElement = HTMLElement>(id: string): T | null {\n  return document.getElementById(id) as T | null;\n}\n\nfunction showStatus(text: string) {\n  console.log(\"SHOWING STATUS:\", text);\n  const status = $(\"status\");\n  const content = $(\"content\");\n  if (status) {\n    status.style.display = \"block\";\n    status.innerHTML = text;\n  }\n  if (content) content.style.display = \"none\";\n}\n\nfunction showContent() {\n  console.log(\"SHOWING CONTENT\");\n  const status = $(\"status\");\n  const content = $(\"content\");\n  if (status) status.style.display = \"none\";\n  if (content) content.style.display = \"block\";\n}\n\nfunction formatNumber(num: number | null | undefined): string {\n  if (num === null || num === undefined) return \"\u2014\";\n  if (num >= 1000000) return (num / 1000000).toFixed(1) + \"M\";\n  if (num >= 1000) return (num / 1000).toFixed(1) + \"K\";\n  return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nfunction displayData(stats: any) {\n  console.log(\"DISPLAYING DATA:\", stats);\n  \n  showContent();\n  \n  // Title & author\n  const titleEl = $(\"title\");\n  const authorEl = $(\"author\");\n  if (titleEl) titleEl.textContent = stats.title || \"Untitled Story\";\n  if (authorEl) authorEl.textContent = stats.author ? `by ${stats.author}` : \"by Unknown Author\";\n\n  // Stats cards\n  const readsEl = $(\"reads\");\n  const votesEl = $(\"votes\");\n  const headerCommentsEl = $(\"headerComments\");\n  const commentItemsCountEl = $(\"commentItemsCount\");\n  \n  if (readsEl) readsEl.textContent = formatNumber(stats.reads);\n  if (votesEl) votesEl.textContent = formatNumber(stats.votes);\n  if (headerCommentsEl) headerCommentsEl.textContent = formatNumber(stats.headerComments);\n  if (commentItemsCountEl) commentItemsCountEl.textContent = formatNumber(stats.commentItemsCount);\n\n  // Calculate engagement\n  const engagementRate = stats.reads && stats.votes && stats.reads > 0\n    ? ((stats.votes / stats.reads) * 100).toFixed(2) + \"%\"\n    : \"\u2014\";\n  const commentRatio = stats.reads && stats.headerComments && stats.reads > 0\n    ? ((stats.headerComments / stats.reads) * 100).toFixed(2) + \"%\"\n    : \"\u2014\";\n\n  const engagementEl = $(\"engagementRate\");\n  const commentRatioEl = $(\"commentRatio\");\n  if (engagementEl) engagementEl.textContent = engagementRate;\n  if (commentRatioEl) commentRatioEl.textContent = commentRatio;\n\n  // Display top paragraphs\n  const topList = $(\"topList\");\n  if (topList && stats.paragraphComments) {\n    topList.innerHTML = \"\";\n    const top = [...stats.paragraphComments]\n      .sort((a, b) => (b.count ?? 0) - (a.count ?? 0))\n      .slice(0, 3);\n\n    top.forEach((p) => {\n      const li = document.createElement(\"li\");\n      const count = p.count ?? 0;\n      const snippet = (p.snippet || p.raw || \"\").substring(0, 80) + \"...\";\n      li.innerHTML = `<strong>${count} comments:</strong> \"${snippet}\"`;\n      topList.appendChild(li);\n    });\n  }\n\n  // Simple chart (no Chart.js dependency)\n  const canvas = $(\"commentsChart\");\n  if (canvas instanceof HTMLCanvasElement && stats.paragraphComments) {\n    const ctx = canvas.getContext(\"2d\");\n    if (ctx) {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.fillStyle = \"#26a69a\";\n      ctx.font = \"16px Arial\";\n      ctx.fillText(\"\uD83D\uDCCA Comment Distribution\", 20, 30);\n      \n      // Draw simple bars\n      const maxCount = Math.max(...stats.paragraphComments.map((p:any) => p.count || 0));\n      stats.paragraphComments.slice(0, 15).forEach((p:any, i:any) => {\n        const height = Math.max((p.count || 0) / maxCount * 80, 2);\n        const x = 25 + i * 25;\n        const y = 120 - height;\n        \n        ctx.fillStyle = \"#26a69a\";\n        ctx.fillRect(x, y, 20, height);\n        \n        ctx.fillStyle = \"#666\";\n        ctx.font = \"10px Arial\";\n        ctx.fillText(`P${i+1}`, x, 135);\n      });\n    }\n  }\n\n  console.log(\"DATA DISPLAY COMPLETE!\");\n}\n\nfunction loadData() {\n  console.log(\"LOADING DATA FROM STORAGE...\");\n  showStatus(\"\uD83D\uDD04 Loading analytics...\");\n  \n  try {\n    chrome.storage.local.get([\"writerAnalyticsStats\"], function(result) {\n      console.log(\"STORAGE RESULT:\", result);\n      \n      if (chrome.runtime.lastError) {\n        console.error(\"STORAGE ERROR:\", chrome.runtime.lastError);\n        showStatus(\"\u274C Storage Error\");\n        return;\n      }\n      \n      const stats = result.writerAnalyticsStats;\n      \n      if (!stats) {\n        showStatus(`\n          <div style=\"text-align: center; padding: 20px;\">\n            <div style=\"font-size: 32px;\">\uD83D\uDCDD</div>\n            <div><strong>No Data Found</strong></div>\n            <div style=\"font-size: 12px; color: #666;\">Visit a Wattpad story page first!</div>\n          </div>\n        `);\n        return;\n      }\n      \n      console.log(\"CALLING DISPLAY DATA...\");\n      displayData(stats);\n    });\n  } catch (error:any) {\n    console.error(\"CRITICAL ERROR:\", error);\n    showStatus(\"\u274C Critical Error: \" + error.message);\n  }\n}\n\n// Theme toggle\nfunction initTheme() {\n  const themeToggle = $(\"theme-toggle\");\n  if (themeToggle) {\n    themeToggle.addEventListener(\"click\", function() {\n      document.body.classList.toggle(\"dark-theme\");\n      const icon = themeToggle.querySelector(\".theme-icon\");\n      if (icon) {\n        icon.textContent = document.body.classList.contains(\"dark-theme\") ? \"\u2600\uFE0F\" : \"\uD83C\uDF19\";\n      }\n    });\n  }\n}\n\n// Initialize\nconsole.log(\"POPUP SCRIPT STARTING...\");\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  console.log(\"DOM LOADED!\");\n  initTheme();\n  setTimeout(loadData, 100);\n});\n\n// Emergency fallback\nsetTimeout(function() {\n  console.log(\"EMERGENCY FALLBACK CHECK\");\n  if ($(\"status\")?.textContent?.includes(\"Loading\")) {\n    console.log(\"STILL LOADING, RETRYING...\");\n    loadData();\n  }\n}, 2000);\n"],
  "mappings": "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",
  "names": []
}
